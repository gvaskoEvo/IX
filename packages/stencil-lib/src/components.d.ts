/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface InnoBreadcrumb {
    }
    interface InnoBreadcrumbItem {
        /**
          * Icon to be displayed next ot the label
         */
        "icon": string;
        "iconSize": number;
        /**
          * Breadcrumb label
         */
        "label": string;
        "showChevron": boolean;
        "visible": boolean;
    }
    interface InnoButton {
        "disabled": boolean;
        "parentBackgroundColor": 'light' | 'dark' | 'light-highlight';
        "tabIdx": number;
        "type": 'button' | 'submit';
        "variant": 'cta' | 'primary' | 'secondary' | 'tertiary' | 'media' | 'navigation';
    }
    interface InnoIcon {
        /**
          * The icon name
         */
        "icon": string;
        "size": number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface InnoBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInnoBreadcrumbElement;
}
export interface InnoBreadcrumbItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInnoBreadcrumbItemElement;
}
declare global {
    interface HTMLInnoBreadcrumbElementEventMap {
        "itemClick": string;
    }
    interface HTMLInnoBreadcrumbElement extends Components.InnoBreadcrumb, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInnoBreadcrumbElementEventMap>(type: K, listener: (this: HTMLInnoBreadcrumbElement, ev: InnoBreadcrumbCustomEvent<HTMLInnoBreadcrumbElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInnoBreadcrumbElementEventMap>(type: K, listener: (this: HTMLInnoBreadcrumbElement, ev: InnoBreadcrumbCustomEvent<HTMLInnoBreadcrumbElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInnoBreadcrumbElement: {
        prototype: HTMLInnoBreadcrumbElement;
        new (): HTMLInnoBreadcrumbElement;
    };
    interface HTMLInnoBreadcrumbItemElementEventMap {
        "breadcrumbItemClick": string;
    }
    interface HTMLInnoBreadcrumbItemElement extends Components.InnoBreadcrumbItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInnoBreadcrumbItemElementEventMap>(type: K, listener: (this: HTMLInnoBreadcrumbItemElement, ev: InnoBreadcrumbItemCustomEvent<HTMLInnoBreadcrumbItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInnoBreadcrumbItemElementEventMap>(type: K, listener: (this: HTMLInnoBreadcrumbItemElement, ev: InnoBreadcrumbItemCustomEvent<HTMLInnoBreadcrumbItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInnoBreadcrumbItemElement: {
        prototype: HTMLInnoBreadcrumbItemElement;
        new (): HTMLInnoBreadcrumbItemElement;
    };
    interface HTMLInnoButtonElement extends Components.InnoButton, HTMLStencilElement {
    }
    var HTMLInnoButtonElement: {
        prototype: HTMLInnoButtonElement;
        new (): HTMLInnoButtonElement;
    };
    interface HTMLInnoIconElement extends Components.InnoIcon, HTMLStencilElement {
    }
    var HTMLInnoIconElement: {
        prototype: HTMLInnoIconElement;
        new (): HTMLInnoIconElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "inno-breadcrumb": HTMLInnoBreadcrumbElement;
        "inno-breadcrumb-item": HTMLInnoBreadcrumbItemElement;
        "inno-button": HTMLInnoButtonElement;
        "inno-icon": HTMLInnoIconElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface InnoBreadcrumb {
        /**
          * Crumb item clicked event
         */
        "onItemClick"?: (event: InnoBreadcrumbCustomEvent<string>) => void;
    }
    interface InnoBreadcrumbItem {
        /**
          * Icon to be displayed next ot the label
         */
        "icon"?: string;
        "iconSize"?: number;
        /**
          * Breadcrumb label
         */
        "label"?: string;
        "onBreadcrumbItemClick"?: (event: InnoBreadcrumbItemCustomEvent<string>) => void;
        "showChevron"?: boolean;
        "visible"?: boolean;
    }
    interface InnoButton {
        "disabled"?: boolean;
        "parentBackgroundColor"?: 'light' | 'dark' | 'light-highlight';
        "tabIdx"?: number;
        "type"?: 'button' | 'submit';
        "variant"?: 'cta' | 'primary' | 'secondary' | 'tertiary' | 'media' | 'navigation';
    }
    interface InnoIcon {
        /**
          * The icon name
         */
        "icon"?: string;
        "size"?: number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "inno-breadcrumb": InnoBreadcrumb;
        "inno-breadcrumb-item": InnoBreadcrumbItem;
        "inno-button": InnoButton;
        "inno-icon": InnoIcon;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "inno-breadcrumb": LocalJSX.InnoBreadcrumb & JSXBase.HTMLAttributes<HTMLInnoBreadcrumbElement>;
            "inno-breadcrumb-item": LocalJSX.InnoBreadcrumbItem & JSXBase.HTMLAttributes<HTMLInnoBreadcrumbItemElement>;
            "inno-button": LocalJSX.InnoButton & JSXBase.HTMLAttributes<HTMLInnoButtonElement>;
            "inno-icon": LocalJSX.InnoIcon & JSXBase.HTMLAttributes<HTMLInnoIconElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
